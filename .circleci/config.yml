version: 2

jobs:
  build-gcc:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.1

    environment:
      CC: ccache mpicc
      CXX: ccache mpicxx
      CCACHE_COMPRESS: 1
      PETSC_DIR: /usr/lib/petsc/
      PYTHONPATH: /home/builder/project/build/site-packages

    steps:
      - checkout
      - restore_cache:
          keys:
            - ccache-gcc-{{ .Branch }}
      - run:
          name: Create the build directory
          command: mkdir -p build
      - run:
          name: Configure PISM
          # CMAKE_BUILD_TYPE=Debug enables pedantic compiler warnings and one or two extra
          # tests.
          #
          # CMAKE_CXX_FLAGS is set to a) disable warnings caused by OpenMPI internals and
          # b) treat all warnings as errors except for the one about the "noreturn"
          # attribute.
          #
          # We need Python bindings and extra executables for many regression tests.
          #
          # PROJ, NetCDF built with parallel I/O, and PnetCDF are optional dependencies but
          # we should build and test the code that uses them. The same applies to ICEBIN.
          #
          # CMAKE_FIND_ROOT_PATH points to HDF5 and NetCDF with support for parallel I/O.
          command: >-
            cmake -B build -S .
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_FIND_ROOT_PATH="$HOME/local/hdf5;$HOME/local/netcdf;$HOME/local/pnetcdf;$HOME/local/parallelio"
            -DCMAKE_CXX_FLAGS="-Wno-cast-function-type -Werror -Wno-error=suggest-attribute=noreturn -Wno-error=undef"
            -DPism_USE_PROJ=Yes
            -DPism_USE_PARALLEL_NETCDF4=Yes
            -DPism_USE_PNETCDF=Yes
            -DPism_USE_PIO=Yes
            -DPython_ADDITIONAL_VERSIONS=3
            -DPism_BUILD_PYTHON_BINDINGS=Yes
            -DPism_BUILD_EXTRA_EXECS=Yes
            -DPism_BUILD_ICEBIN=Yes
      - run:
          name: Build PISM using GCC
          command: make --no-print-directory -C build -j4 all
      - save_cache:
          key: ccache-gcc-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.ccache
      - run:
          name: Run regression tests
          command: cd build && ctest -j 4 --output-on-failure

  build-gcc-minimal:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.1

    environment:
      CC: ccache mpicc
      CXX: ccache mpicxx
      CCACHE_COMPRESS: 1
      PETSC_DIR: /usr/lib/petsc/

    steps:
      - checkout
      - restore_cache:
          keys:
            - ccache-gcc-minimal-{{ .Branch }}
      - run:
          name: Create the build directory
          command: mkdir -p build
      - run:
          name: Configure PISM
          command: >-
            cmake -B build -S .
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_FIND_ROOT_PATH="$HOME/local/hdf5;$HOME/local/netcdf"
            -DCMAKE_CXX_FLAGS="-Wno-cast-function-type -Werror -Wno-error=suggest-attribute=noreturn -Wno-error=undef"
      - run:
          name: Build PISM using GCC
          command: make --no-print-directory -C build -j4 all
      - save_cache:
          key: ccache-gcc-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.ccache

  build-clang:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.1

    environment:
      CCACHE_COMPRESS: 1
      PETSC_DIR: /usr/lib/petsc/
      PYTHONPATH: /home/builder/project/build/site-packages

    steps:
      - checkout
      - restore_cache:
          keys:
            - ccache-clang-{{ .Branch }}
      - run:
          name: Create the build directory
          command: mkdir -p build
      - run:
          name: Configure PISM
          command: >-
            CC="ccache $(mpicc -show | sed s/gcc/clang/)"
            CXX="ccache $(mpicxx -show | sed s/g++/clang++/)"
            cmake -B build -S .
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_FIND_ROOT_PATH="$HOME/local/hdf5;$HOME/local/netcdf;$HOME/local/pnetcdf;$HOME/local/parallelio"
            -DCMAKE_C_FLAGS="-Werror -Wno-unused-command-line-argument"
            -DCMAKE_CXX_FLAGS="-Werror -Wno-unused-command-line-argument"
            -DPism_USE_PROJ=Yes
            -DPism_USE_PARALLEL_NETCDF4=Yes
            -DPism_USE_PNETCDF=Yes
            -DPism_USE_PIO=Yes
            -DPython_ADDITIONAL_VERSIONS=3
            -DPism_BUILD_PYTHON_BINDINGS=Yes
            -DPism_BUILD_EXTRA_EXECS=Yes
            -DPism_BUILD_ICEBIN=Yes
      - run:
          name: Build PISM using Clang
          command: make --no-print-directory -C build -j4 all
      - save_cache:
          key: ccache-clang-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.ccache
      - run:
          name: Run regression tests
          command: cd build && ctest -j 4 --output-on-failure

  build-clang-minimal:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.1

    environment:
      CCACHE_COMPRESS: 1
      PETSC_DIR: /usr/lib/petsc/

    steps:
      - checkout
      - restore_cache:
          keys:
            - ccache-clang-minimal-{{ .Branch }}
      - run:
          name: Create the build directory
          command: mkdir -p build
      - run:
          name: Configure PISM
          command: >-
            CC="ccache $(mpicc -show | sed s/gcc/clang/)"
            CXX="ccache $(mpicxx -show | sed s/g++/clang++/)"
            cmake -B build -S .
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_FIND_ROOT_PATH="$HOME/local/hdf5;$HOME/local/netcdf"
            -DCMAKE_C_FLAGS="-Werror -Wno-unused-command-line-argument"
            -DCMAKE_CXX_FLAGS="-Werror -Wno-unused-command-line-argument"
      - run:
          name: Build PISM using Clang
          command: make --no-print-directory -C build -j4 all
      - save_cache:
          key: ccache-clang-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.ccache

  build-manual:
    docker:
      - image: ckhrulev/pism-ubuntu:0.1.1

    steps:
      - checkout
      - run:
          name: Build the manual
          command: |
            mkdir -p build
            cmake -B build -S doc/ -DCMAKE_INSTALL_PREFIX=/tmp/pism -DPism_DOC_DIR="manual"
            make -C build install
      - persist_to_workspace:
          root: /tmp/pism/manual
          paths: html

  deploy-manual:
    docker:
      - image: node:8.10.0

    steps:
      - checkout
      - attach_workspace:
          at: manual
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ckhroulev@alaska.edu"
            git config user.name "CI Builder (PISM manual)"
      - add_ssh_keys:
          fingerprints:
            - "15:22:79:ff:0a:1d:aa:5a:8e:bb:e1:94:51:2e:67:2f"
      - run:
          name: Deploy the manual to GitHub Pages
          command: >-
            gh-pages --dotfiles
            --message "[skip ci] Update the manual"
            --dist manual/html

workflows:
  version: 2
  build-and-test:
    jobs:
      - build-gcc
      - build-gcc-minimal
      - build-clang
      - build-clang-minimal
      - build-manual
      - deploy-manual:
          requires:
            - build-gcc
            - build-gcc-minimal
            - build-clang
            - build-clang-minimal
            - build-manual
          filters:
            branches:
              only: dev
